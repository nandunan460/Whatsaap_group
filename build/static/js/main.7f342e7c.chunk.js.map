{"version":3,"sources":["WA.svg","logo.svg","firebase.js","SidebarChat.js","StateProvider.js","Reducer.js","Sidebar.js","Chat.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarChat","id","name","addNewChat","useState","seed","setSeed","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","Math","floor","random","onClick","roomName","prompt","add","className","to","Avatar","src","message","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","actionTypes","state","action","console","log","type","user","Sidebar","rooms","setRooms","dispatch","unsubscribe","photoURL","IconButton","icon","logoutIcon","SearchOutlined","placeholder","room","key","Chat","input","setInput","roomId","useParams","setRoomName","setmessages","Date","length","timestamp","toDate","toUTCString","displayName","InsertEmoticon","onChange","e","target","preventDefault","FieldValue","serverTimestamp","Login","alt","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f342e7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/WA.d89731b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from \"firebase\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCPGRVr2tMi_6-YnhAgcdIZPmrF37B3O8o\",\n  authDomain: \"whatsapp-6e414.firebaseapp.com\",\n  projectId: \"whatsapp-6e414\",\n  storageBucket: \"whatsapp-6e414.appspot.com\",\n  messagingSenderId: \"359314707202\",\n  appId: \"1:359314707202:web:5f6395f9a42062b44b681b\",\n  measurementId: \"G-7ZGPDH2KX7\",\n};\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst db = firebaseApp.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport { auth, provider };\nexport default db;\n","import React,{useState,useEffect} from 'react'\nimport \"./SidebarChat.css\"\nimport {Avatar} from \"@material-ui/core\"\nimport db from \"./firebase\"\nimport {Link} from \"react-router-dom\"\nexport default function SidebarChat({id,name,addNewChat}) {\n    const [seed,setSeed]=useState(\"\");\n    const [messages,setMessages]=useState(\"\")\n    useEffect(()=>{\n        if(id){\n            db.collection('Rooms')\n            .doc(id)\n            .collection('messages')\n            .orderBy('timestamp','desc')\n            .onSnapshot((snapshot)=>\n              setMessages(snapshot.docs.map((doc)=>\n              doc.data()))\n            )\n           \n        }\n    },[id])\n    useEffect(()=>{\n        setSeed(Math.floor(Math.random()*5000));\n    },[]);\n    const createChat=()=>{\n        const roomName=prompt(\"Please enter name for chat\")\n        if(roomName){\n            db.collection(\"Rooms\").add({name:roomName})\n\n        }\n    };\n    return !addNewChat?(\n        <Link to={`/rooms/${id}`}>\n                <div className=\"sidebarChat\">\n           <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\n           <div className=\"sidebarChat__info\">\n               <h2>{name}</h2>\n               <p>{messages[0]?.message}</p>\n           </div>\n        </div>\n        </Link>\n        \n    ):(\n        <div onClick={createChat}\n        className=\"sidebarChat\">\n            <h2>Add new Chat</h2>\n\n        </div>\n    );\n}\n"," import React,{createContext,useContext,useReducer} from \"react\"\n export const StateContext=createContext();\n\n export const StateProvider=({reducer,\ninitialState,children})=>(\n    <StateContext.Provider value={useReducer\n    (reducer,initialState)}>\n        {children}\n    </StateContext.Provider>\n)\nexport const useStateValue=()=>useContext\n(StateContext)","export const initialState={\n    user:null\n}\nexport const actionTypes={\n    SET_USER:\"SET_USER\"\n}\nconst reducer=(state,action)=>{\n    console.log(action)\n    switch(action.type){\n    case actionTypes.SET_USER:\n        return{\n            ...state,\n            user:action.user\n        }\n        default:\n            return state;\n    }\n}\nexport default reducer;","import React, { useState, useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\nimport { SearchOutlined } from \"@material-ui/icons\";\nimport SidebarChat from \"./SidebarChat\";\nimport db from \"./firebase\";\nimport { useStateValue } from \"./StateProvider\";\nimport { Icon, InlineIcon } from \"@iconify/react\";\nimport logoutIcon from \"@iconify-icons/mdi/logout\";\nimport { Link } from \"react-router-dom\";\nimport { actionTypes } from \"./Reducer\";\n\nfunction Sidebar() {\n  const [rooms, setRooms] = useState([]);\n  const [{ user }, dispatch] = useStateValue();\n  useEffect(() => {\n    const unsubscribe = db.collection(\"Rooms\").onSnapshot((snapshot) =>\n      setRooms(\n        snapshot.docs.map((doc) => ({\n          id: doc.id,\n          data: doc.data(),\n        }))\n      )\n    );\n    return () => {\n      unsubscribe();\n    };\n  }, []);\n  const signOut = () => {\n    dispatch({\n      type: actionTypes.SET_USER,\n      user: null,\n    });\n  };\n  return (\n    <div className=\"sidebar\">\n      <div className=\"sidebar__header\">\n        <Avatar src={user.photoURL} />\n        <div className=\"sidebar__headerRight\">\n          <IconButton>\n            <DonutLargeIcon />\n          </IconButton>\n          <IconButton>\n            <ChatIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n          <Link to={`/`}>\n            <IconButton>\n              <Icon icon={logoutIcon} onClick={signOut} />\n            </IconButton>\n          </Link>\n        </div>\n      </div>\n      <div className=\"sidebar__search\">\n        <div className=\"sidebar__searchContainer\">\n          <SearchOutlined />\n\n          <input placeholder=\"Search or start new chat\" type=\"text\" />\n        </div>\n      </div>\n\n      <div className=\"sidebar__chats\">\n        <SidebarChat addNewChat />\n        {rooms.map((room) => (\n          <SidebarChat key={room.id} id={room.id} name={room.data.name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n"," import React,{useState,useEffect}from 'react'\nimport \"./Chat.css\"\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\"\nimport ChatIcon from \"@material-ui/icons/Chat\"\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\"\nimport {Avatar,IconButton} from \"@material-ui/core\"\nimport { InsertEmoticon,AttachFile } from '@material-ui/icons'\nimport MicIcon from \"@material-ui/icons/Mic\"\nimport {useParams} from \"react-router-dom\"\nimport db from './firebase'\nimport { useStateValue } from './StateProvider'\nimport firebase from \"firebase\"\nexport default function Chat() {\n    const [seed,setSeed]=useState(\"\");\n    const [input,setInput]=useState(\"\");\n    const {roomId}=useParams()\n    const [roomName,setRoomName]=useState(\"\")\n    const [messages,setmessages]=useState([])\n    const [{user},dispatch]=useStateValue()\n    useEffect(() => {\n        if(roomId){\n            db.collection(\"Rooms\").doc(roomId).\n            onSnapshot((snapshot)=>\n                setRoomName(snapshot.data().name)\n            )\n            db.collection('Rooms').doc(roomId).\n            collection(\"messages\").orderBy\n            ('timestamp','asc').onSnapshot(snapshot=>(\n               setmessages(snapshot.docs.map(doc=>\n               doc.data())) \n            ))\n        }\n    }, [roomId])\n    useEffect(() => {\n        setSeed(Math.floor(Math.random()*5000))\n    }, [])\n    const sendMessage=(e)=>{\n                e.preventDefault();\n                db.collection('Rooms').doc(roomId).collection('messages')\n                .add({\n                    message:input,\n                    name:user.displayName,\n                    timestamp:firebase.firestore.FieldValue.serverTimestamp()\n                })\n                setInput(\"\")\n            }\n    return (\n        <div className=\"chat\">\n            <div className=\"chat__header\">\n                <Avatar src={`https://avatars.dicebear.com/api/human/${seed}.svg`}/>\n                <div className=\"chat__headerInfo\">\n                <h3>{roomName}</h3>\n                <p>Last seen{\" \"}\n                {new Date(\n                    messages[messages.length-1]?.timestamp?.toDate()\n                ).toUTCString()}</p>\n                </div>\n                <div className=\"chat__headerRight\">\n                <IconButton>\n                    <DonutLargeIcon/>\n                    </IconButton>\n                   <IconButton>\n                   <ChatIcon/>\n                   </IconButton>\n                    <IconButton>\n                    <MoreVertIcon/>\n                    </IconButton>\n                </div>\n            </div>\n            <div className=\"chat__body\">\n                {messages.map((message)=>(\n                         <p className={`chat__message \n                         ${message.name===user.displayName && `chat__reciever`}`}>\n                         <span className=\"chat__name\">{message.name}</span>\n                             {message.message}\n                         <span className=\"chat__timestamp\">\n                             {new Date(message.timestamp?.toDate()).toUTCString()}\n                             </span>\n                         </p>\n                ))}\n               \n    \n            </div>\n            <div className=\"chat__footer\">\n                <InsertEmoticon/>\n                <form>\n                    <input value={input} onChange={e=>\n                        setInput(e.target.value)}type=\"text\" placeholder=\"Type a message\"/>\n                    <button type=\"submit\" onClick={sendMessage}>Send a message</button>\n                </form>\n                <MicIcon/>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Button} from \"@material-ui/core\"\nimport \"./Login.css\"\nimport icon from \"./WA.svg\"\nimport {auth,provider} from \"./firebase\"\nimport {actionTypes} from \"./Reducer\"\nimport {useStateValue} from \"./StateProvider\"\nfunction Login() {\n    const [{},dispatch]=useStateValue();\n    const signIn=()=>{\n        auth\n        .signInWithPopup(provider)\n        .then((result)=>{\n           dispatch({\n               type:actionTypes.SET_USER,\n               user:result.user\n           })\n        })\n        .catch((error)=>alert(error.message))\n    }\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n            <img\n             src={icon}\n             alt=\"\"\n             />\n             <div className=\"login__text\">\n                 <h1>Sign in to WhatsApp</h1>\n             </div>\n             <Button type=\"submit\" onClick={signIn}>\n                 Sign In With Google\n             </Button>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Login\n","import React,{useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Sidebar from \"./Sidebar\"\nimport Chat from \"./Chat\"\nimport Login from \"./Login\"\nimport {BrowserRouter as Router,Switch,Route} from \"react-router-dom\"\nimport {useStateValue} from \"./StateProvider\"\nfunction App() {\n  const [{user},dispatch]=useStateValue();\n  return (\n    //BEM naming conversation\n    <div className=\"app\">\n      {!user?(\n        <Login/>\n      ):(\n     <div className=\"app__body\">\n      <Router>\n      <Sidebar/>\n        <Switch>\n       \n          <Route path=\"/Rooms/:roomId\">\n         <Chat/>\n         \n          </Route>\n          \n          <Route path=\"/\">\n            <Chat/>\n          </Route>\n          \n       </Switch>\n    </Router>\n     </div>\n    )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reducer,{initialState} from \"./Reducer\"\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from \"./StateProvider\"\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider initialState={initialState}\n    reducer={reducer}>\n        <App />\n    </StateProvider>\n  \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}